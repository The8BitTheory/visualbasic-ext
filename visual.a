!macro message {!pet "Visual Basic Extension installed"}

	!to "visual.bin", cbm

	!source <6502/std.a>		; for +bit16
	!source <6502/opcodes.a>	; for AND/ORA self-mods
	!source <cbm/c128/kernal.a>	; for k_primm
	!source "vdclib.a"	; macros and code parts

; zp
linnum                      = $16	; uint16 for POKE, PEEK(), etc.
arg1                        = $84	; actually colors and scale factors for graphics
arg2                        = $86
arg3                        = $88
arg4                        = $8A
arg5                        = $8B
arg6                        = $8E

; basic
b_skip_comma                = $795c	; if comma: skip, otherwise: syntax error
b_parse_uint16_comma_uint8  = $8803	; read unsigned 16-bit value to linnum, comma, unsigned 8-bit value to X
b_parse_comma_uint16        = $880f	; skip comma, read unsigned 16-bit value to AAYY (also stored in linnum)
b_parse_uint16              = $8812	; read unsigned 16-bit value to AAYY (also stored in linnum)
b_parse_uint8_to_X          = $87f4	; read unsigned 8-bit value to X
c_copy_rom_font_to_vram     = $c027
e_set_vdc_registers         = $e1dc	; a kernel routine to set several registers in a row

; addresses pointing to main memory
m_mystack                   = $fa   ; like a stack
m_mystack2                  = $8f
m_menufile                  = $fb   ; and $fc. pointer to lb,hb of menu.data file
m_temp                      = $fd   ; and $fe. used to keep offset to data of current menuitem or form element
m_menudata_length           = $0312 ; and $0313. keeps length of menu data visuals that need to be copied to hidden vram
                                    ; maybe we can discard this after the initial copy. depends on how recovery should work.
m_topmenu_length            = $03e4 ; length of top-menu string. needed for VMC to visible VRAM
m_topmenu_entries           = $03e5 ; nr of entries in the top-menu bar. needed for rolling over menu-selection
m_menuspec                  = $03e6 ; and $03e7. memory address where menu specs start. 6 bytes per menu entry
m_topmenu_selected          = $03e8 ; index of current top-menu. $FF for none
m_menuentry_selected        = $03e9 ; index of current menu-entry (inside selected top-menu)
m_menu_entries              = $03ea ; nr of entries in current menu (used for highlighting after up/down, can be updated on show_menu)
m_menu_entrylength          = $03eb ; length per entry in current menu (used for highlighting after up/down, can be updated on show_menu)

m_form_offset               = $3fd  ; and $3fe. 

; addresses pointing to vram
v_charset1                  = $02a1 ; used for charset address in vram. this is the HB only. LB is always 0
v_saveram                   = $03ec ; and $03ed. LB/HB. store screen-ram for recovery at this vram-address
                                    ; saveram is at m_charset1 + menudata_length
v_attributeram              = $03ee ; and $03ef. pointer to attribute ram

; offsets
    ; 0(0-1)=offset in menu.data (2 bytes) - start-loc of dropdown-menu in vram
    ; 1(2)=offset on screen to left border - 1 byte
    ; 2(3)=length of top-menu entry - 1 byte
    ; 3(4)=nr lines (equals height) - 1 byte
    ; 4(5)=line length (equals width) - 1 byte
o_menuspec                  = 0
o_topmenu_indent            = 2
o_topmenu_length            = 3
o_menu_height               = 4
o_menu_width                = 5

f_border_horizontal         = $40
f_border_vertical           = $5d
f_border_top_left           = $70
f_border_top_right          = $6e
f_border_bottom_left        = $6d
f_border_bottom_right       = $7d

; file format
; 0-1: format bytes (VM)
; 2-3: length of menu-visuals (that's what needs to be copied to vram, starting at byte #4)
; 4-n: menu visuals
; n+1: length of top-menu string (ie the full visual menu-line string on top)
; n+2: nr of top-menu entries
; m (=n+3): data for menu-dropdowns. each menu has 6 bytes of data.
; m0-1: menu visuals for menu-dropdown (ie the border and menu entries and maybe hotkey bindings)
; m2:   indentation of top-menu from left screen border
; m3:   length of top-menu entry of this menu. needed for highlighting open menu
; m4:   height of menu-dropdown in lines (includes top and bottom border)
; m5:   width of menu-dropdown in chars (includes left and right borders and one additional whitespace between text and border on each side)

; f0-1: format bytes (VF)

; FRAME
; f0: ID (auto-incrementing number, used at runtime)
; f1: ui-element-type-id 1
; f2: x-pos
; f3: y-pos
; f4: width
; f5: height
; f6: has menu
; f7: caption-length
; f8-n: caption-string


; end: VE+00


* = $1300

    ;sys dec("1300")
    jmp initialize
    
    ;sys dec("1303")
    jmp show_menu

    ;sys dec("1306")
    jmp hide_menu

    ;sys dec("1309")
    jmp menu_left

    ;sys dec("130c")
    jmp menu_right

    ;sys dec("131f")
    jmp menu_down
    
    ;sys dec("1312")
    jmp menu_up

    ;sys dec("1315")
    ;jmp draw_form_element


draw_form_element
    ; get offset of current form-element
    lda m_form_offset
    sta m_temp
    lda m_form_offset+1
    sta m_temp+1

    ; get element-type (at element-offset +1)
    ldx #0
    ldy #1
    lda #m_temp
    jsr k_indfet

    cmp #1
    bne +
    jmp draw_frame

    ; if type=frame then goto draw_frame
+   jsr k_primm
    !pet "Unknown UI-Element"
    !byte 0
    rts

draw_frame
    ; m_temp contains offset to current form element

    ; frame drawing:
    ; - top-left character, eg ╔
    ; - left border, eg ║ for height-2 times (-1 for top border element, -1 for bottom border-element)
    ; - bottom-left character, eg ╚

    ; load width and decrease by 1.
    ldx #0
    ldy #4
    lda #m_temp
    jsr k_indfet
    
    sec
    sbc #1
    sta m_mystack

    lda #0
    sta arg1
    sta arg1+1

    ; calculate address for top-left frame element
    ; arg1 = xpos + ypos*80
    ; load xpos
    ldx #0
    ldy #2
    lda #m_temp
    jsr k_indfet
    sta arg1

    ; load ypos
    ldx #0
    ldy #3
    lda #m_temp
    jsr k_indfet

    ; ypos * 80 
    tax    ; use y as counter, how often we need to add 80 to the offset.
-   beq ++                      ; if zero, we're done

    clc
    lda arg1
    adc #80                    ;add 80 offset per y-koordinate
    sta arg1

    bcc +
    inc arg1+1

+   dex
    jmp -    

    ; top-left corner character
++  lda #f_border_top_left
    sta arg2

    ; draw top-left corner border element
    jsr vmw

    ; add 1 to the target addres and draw horizontal line
    clc
    lda arg1
    adc #1
    sta arg1

    bcc +
    inc arg1+1

+   jsr .draw_horizontal_line

    ; subtract 1 from the target address to that the width-value in m_mystack is right for drawing the border element on the right
    sec
    lda arg1
    sbc #1
    sta arg1
    bcs +
    dec arg1+1

+   clc
    lda arg1
    adc m_mystack
    sta arg1

    bcc +
    inc arg1+1

+   lda #f_border_top_right
    sta arg2

    ; draw top-right corner border element
    jsr vmw
    
    ; remove right border offset
    sec
    lda arg1
    sbc m_mystack
    sta arg1

    bcs +
    dec arg1+1
    
;---------------- left and right border -----------------------
    ; draw left border. starts one below the previous address and writes a single byte per line until height is reached
    ; arg1 = previous arg1+80
    ; arg2 = character for border element
    ; repeat for height-2 times (X-reg)

    ; arg2
+   ldy #f_border_vertical
    sty arg2

    ; load height for nr of repetitions
    ldx #0
    ldy #5
    lda #m_temp
    jsr k_indfet

    sta m_mystack2 ; store height
    dec m_mystack2 ; reduce by 2 (top- and bottom border)
    dec m_mystack2

-   beq ++

    ; left border
    clc
    lda arg1
    adc #80
    sta arg1

    bcc +
    inc arg1+1

    ; draw left border element
+   jsr vmw

    ; add right-border offset to A
    clc
    lda arg1
    adc m_mystack
    sta arg1

    bcc +
    inc arg1+1

    ; draw right border element
+   jsr vmw

    ; restore previous A
    sec
    lda arg1
    sbc m_mystack
    sta arg1

    bcs +
    dec arg1+1

+   dec m_mystack2

    jmp -




    ; draw bottom-left corner element
    ; add 80 to previous address
++  clc
    lda arg1
    adc #80
    sta arg1

    bcc +
    inc arg1+1

+   lda #f_border_bottom_left
    sta arg2

    jsr vmw

    ;------ draw bottom line ---------
    clc
    lda arg1
    adc #1
    sta arg1

    bcc +
    inc arg1+1

+   jsr .draw_horizontal_line

    ; draw bottom-right corner
    ; set arg1 to the right value so that m_mystack correctly provides the offset for the border to the right
    clc
    lda arg1
    adc m_mystack
    sta arg1

    bcc +
    inc arg1+1

+   sec
    lda arg1
    sbc #1
    sta arg1

    bcs +
    dec arg1+1

+   lda #f_border_bottom_right
    sta arg2

    jsr vmw

    rts


.draw_horizontal_line
    ;arg1 has to be set before calling this method

+   lda #f_border_horizontal
    sta arg2

    ; arg 3: chars to fill (subtract 2 to have the correct value)
    ldx #0
    ldy #4
    lda #m_temp
    jsr k_indfet
    sta arg3
 
    sec
    lda arg3
    sbc #2
    bcs +
    dec arg3+1
    
+   ldy #0
    sty arg2+1
    sty arg3+1
    sty arg4
    sty arg5
    sty arg6

    ; fill line
    jmp vmf

; ---------------------------------- MENU NAVIGATION ---------------------------
menu_up
    jsr .dehighlight_menuentry

    lda m_menu_entries
    sta m_mystack
    dec m_mystack
    dec m_mystack

    dec m_menuentry_selected
    bpl +

    ldx m_menu_entries
    dex
    dex
    dex
    stx m_menuentry_selected
    
+   jmp .highlight_menuentry

menu_down
    jsr .dehighlight_menuentry

    lda m_menu_entries
    sta m_mystack
    dec m_mystack
    dec m_mystack

    inc m_menuentry_selected

    lda m_menuentry_selected
    cmp m_mystack
    bmi +

    lda #0
    sta m_menuentry_selected
    
+   jmp .highlight_menuentry

menu_right
    lda m_topmenu_selected
    cmp #$FF
    bne +
    rts

    ;hide_menu sets topmenu_selected to $FF
    ;  so we need to remember this value temporarily
+   sta m_mystack
    jsr hide_menu
    
    ldx m_mystack
    inx
    cpx m_topmenu_entries
    bmi +

    ldx #$0

+   stx m_topmenu_selected
    lda #0
    sta m_menuentry_selected

    jsr show_menu
    rts


menu_left
    lda m_topmenu_selected
    cmp #$FF
    bne +
    rts

    ;hide_menu sets topmenu_selected to $FF
    ;  so we need to remember this value temporarily
+   sta m_mystack
    jsr hide_menu
    
    ldx m_mystack
    dex
    bpl +

    ldx m_topmenu_entries
    dex
    stx m_topmenu_selected

+   stx m_topmenu_selected
    lda #0
    sta m_menuentry_selected

    jsr show_menu
    rts


show_menu
    lda m_topmenu_selected
    cmp #$FF
    bne +
    rts

+   jsr .menuspec_to_temp

    ; load nr of lines into Acc
    jsr .spec_3_to_A
    sta m_menu_entries

    ; load line-width int Acc
    jsr .spec_4_to_A
    sta m_menu_entrylength


    ;-----------------------------------------------
    ;save area that will be covered by menu for restoring later
    ;VMC 80+MD(ME,1),SR,         MD(ME,4),MD(ME,3),MD(ME,4),80
    ;display
    ;VMC CA+MD(ME,0),80+MD(ME,1),MD(ME,4),MD(ME,3),80
    ; copy from line1+left_offset to SAVE-RAM area
    ;  copy ME,4 Bytes. do it me,3 times.
    ;                   increase target address by me,4 bytes
    ;                   increase source address by 80 bytes (ie 1 line)
    ;arg1 vram-source
    jsr .spec_1_to_A
    sta arg1

    clc
    adc #80
    sta arg1

    lda #0
    adc #0
    sta arg1+1

    ;arg2 vram-dest
    lda v_saveram
    sta arg2

    lda v_saveram+1
    sta arg2+1

    ;arg3 copy-size
    lda m_menu_entrylength
    sta arg3
    sta arg5

    lda #0
    sta arg3+1

    ;arg4 repetitions
    lda m_menu_entries
    sta arg4

    ;arg5 dest-increase per rep
    ; stored with arg3

    ;arg6 src-increase per rep
    lda #80
    sta arg6

    jsr vmc

    ; highlight top menuentry
    jsr .top_menu_command

    ;arg2=199
    clc
    lda #199
    sta arg2

    lda #0
    sta arg2+1

    jsr vmf

    ;display the menu
    ;VMC CA+MD(ME,0),80+MD(ME,1),MD(ME,4),MD(ME,3),80
    ; CA=8192
    
    ;arg1 vram-source
    ldx #0
    ldy #o_menuspec
    lda #m_temp
    jsr k_indfet
    sta arg1

    ldx #0
    ldy #o_menuspec+1
    lda #m_temp
    jsr k_indfet

    adc v_charset1
    sta arg1+1

    ;arg2 vram-dest
    jsr .spec_1_to_A

    clc
    adc #80
    sta arg2

    lda #0
    adc #0
    sta arg2+1

    ;arg3 copy-size
    lda m_menu_entrylength
    sta arg3

    lda #0
    sta arg3+1

    ;arg4 repetitions
    lda m_menu_entries
    sta arg4

    ;arg5 dest-address inc per rep
    lda #80
    sta arg5

    lda #0
    sta arg6

    jsr vmc
;continues at .highlight_menuentry


.highlight_menuentry
    jsr .menuentry_highlight_prep_1_and_3

    ;arg2=199
    clc
    lda #199
    sta arg2

    lda #0
    sta arg2+1

    jmp vmf



.menuentry_highlight_prep_1_and_3
    ;if no top-menu selected ($ff), leave method
    ldy m_topmenu_selected
    cmp #$FF
    beq +

    jsr .menuspec_to_temp
    
    ;arg1=v_attributeram + m_temp
    jsr .spec_1_to_A
    
    clc   
    adc v_attributeram
    sta arg1

    lda #0
    adc v_attributeram+1
    sta arg1+1

    ;add 161 to arg1. 160 for going below the border, 1 to not highlight the border
    clc
    lda arg1
    adc #161
    sta arg1

    bcc +
    inc arg1+1

    ;add 80 per line
+   ldx m_menuentry_selected    ; counter, how often we need to add 80 to the offset
-   beq ++                      ; if zero, we're done

    clc
    adc #80                    ;add 80 offset per top-menu item
    sta arg1

    bcc +
    inc arg1+1

+   dex
    jmp -

    ;arg3=m_temp
    ; load length of menuentries in this topmenu
++  lda m_menu_entrylength
    
    ; minus 1 to the length to cover whitespaces between border and text of menuentry
    sbc #1
    sta arg3

    ; arg3 won't exceed 256 bytes, so we just set HB to 0
    lda #0
    sta arg3+1

+   rts


; hide popup/dropdown-menu
hide_menu
    lda m_topmenu_selected
    cmp #$FF
    bne +
    rts
    
+   jsr .dehighlight_menuentry

    ;de-highlight top-menu entry
    ;VMF 2048+MD(ME,1),128+7,MD(ME,2)
+   jsr .top_menu_command
    ;arg2=135
    clc
    lda #135
    sta arg2

    lda #0
    sta arg2+1

    jsr vmf

    ;restore previous screen contents
    ;VMC SR,80+MD(ME,1),MD(ME,4),MD(ME,3),80,MD(ME,4)
    ;arg1 vram-src
    lda v_saveram
    sta arg1

    lda v_saveram+1
    sta arg1+1

    ;arg2 vram-dest
    jsr .spec_1_to_A

    clc
    adc #80
    sta arg2

    lda #0
    adc #0
    sta arg2+1

    ;arg3 copy-size
    lda m_menu_entrylength
    sta arg3
    sta arg6

    lda #0
    sta arg3+1

    ;arg4 repetitions
    lda m_menu_entries
    sta arg4

    ;arg5 src-increase per rep
    lda #80
    sta arg5

    jsr vmc

    lda #$ff
    sta m_topmenu_selected

    rts

.dehighlight_menuentry
    jsr .menuentry_highlight_prep_1_and_3

    ;arg2=135
    clc
    lda #135
    sta arg2

    lda #0
    sta arg2+1

    jmp vmf


; show popup/dropdown-menu
.top_menu_command

    ;highlight top-menu entry
    ;VMF 2048+MD(ME,1),128+64+7,MD(ME,2)
    ; 2048 = attribute-ram
    ; md(m_topmenu_selected,n)
    ; 0(0-1)=offset in menu.data (2 bytes) - start-loc of dropdown-menu in vram
    ; 1(2)=offset on screen to left border - 1 byte
    ; 2(3)=length of top-menu entry - 1 byte
    ; 3(4)=nr lines (equals height) - 1 byte
    ; 4(5)=line length (equals width) - 1 byte
    ;jsr .menuspec_to_temp

    ;arg1=v_attributeram + m_temp
    clc
    jsr .spec_1_to_A
    ;adc v_attributeram
    sta arg1

    lda v_attributeram+1
    ;lda #0
    sta arg1+1

    ;arg3=m_temp
    jsr .spec_2_to_A
    sta arg3
    tay

    lda #0
    sta arg3+1

    ;display the menu
    ;VMC CA+MD(ME,0),80+MD(ME,1),MD(ME,4),MD(ME,3),80

    rts

.menuspec_to_temp
    ; calculate MD(ME,1) menuspec@menuitem*6+2
    ; as a result, m_temp (and +1) contains address of m_menuspec plus offset for selected entry
    lda m_menuspec
    sta m_temp
    lda m_menuspec+1
    sta m_temp+1

    lda m_menuspec
    ldx m_topmenu_selected      ; counter, how often we need to add 6 to the offset
-   beq ++                      ; if zero, we're done

    clc
    adc #$06                    ;add 6 offset per top-menu item
    sta m_temp

    bcc +
    inc m_temp+1

+   dex
    jmp -

++  rts

; m_temp must be set via .menuspec_to_temp before calling these
; offset on screen to left border - 1 byte
.spec_1_to_A
    ldy #2
    jmp .spec_Y_to_A

; length of top-menu entry - 1 byte
.spec_2_to_A
    ldy #3
    jmp .spec_Y_to_A

; nr lines (equals height (plus 2 lines for border)) - 1 byte
.spec_3_to_A
    ldy #4
    jmp .spec_Y_to_A

; line length (equals width (plus 4 for borders and whitespaces)) - 1 byte
.spec_4_to_A
    ldy #5

.spec_Y_to_A
    ldx #0
    lda #m_temp
    jsr k_indfet
    rts

initialize
    jsr .clear_memory
    jsr .read_charset_address
    jsr .read_attribute_address
    jsr .check_file_format
    jsr .copy_menu_to_vram
    jsr .load_offsets
    jsr .setup_screen
    jsr draw_form_element
    jsr .display_top_menu
    

    rts

; copy top-menu from invisible vram to visible vram
.display_top_menu
    ;VMC CA,0,ML  - vdclib.a expects HB in arg+1 (A), LB in arg (Y)

    ldy #$00
    sty arg1
    lda v_charset1
    sta arg1+1

    ldy #81
    sty arg2
    lda #0
    sta arg2+1

    ldy m_topmenu_length
    sty arg3
    lda #0
    sta arg3+1

    ldx #$1;
    stx arg4

    jsr vmc

    rts

; fill background, set charset1 for full screen
.setup_screen
    ;set all attribute ram to charset1: vmf 2048 ($800),135 ($87),2000 ($7d0)
    ldy #$00
    sty arg1
    lda #$08
    sta arg1+1

    ldy #$87
    sty arg2
    lda #$00
    sta arg2+1

    ldy #$d0
    sty arg3
    lda #$07
    sta arg3+1

    jsr vmf
    
    ;fill background: vmf 0,32 ($20),2000 ($7d0)
    ldy #$00
    sty arg1
    lda #$00
    sta arg1+1

    ldy #$20
    sty arg2
    lda #$00
    sta arg2+1
    
    ldy #$d0
    sty arg3
    lda #$07
    sta arg3+1

    jsr vmf
    
    rts

; loads offsets for top-menu and popup-menus
.load_offsets
    ;length of top-menu string
    ;stored at offset m_menufile+4+m_menudata_length
    clc
    lda m_menufile
    adc #4
    tax

    lda m_menufile+1
    adc #0
    tay

    clc
    txa
    adc m_menudata_length
    sta m_temp

    tya
    adc m_menudata_length+1
    sta m_temp+1

    ldx #0
    ldy #0
    lda #m_temp
    jsr k_indfet
    sta m_topmenu_length

    ; form data starts here ($1a6 hardcoded for now)
    clc
    lda #$a6
    adc m_menufile
    sta m_form_offset

    lda #$01
    adc m_menufile+1
    sta m_form_offset+1

    ;nr of entries in top-menu
    ldx #0
    iny
    lda #m_temp
    jsr k_indfet
    sta m_topmenu_entries

    ;offset to m_menuspec
    clc
    lda m_temp
    adc #$02
    sta m_menuspec
    lda m_temp+1
    adc #$0
    sta m_menuspec+1

    ;save-ram for vram recovery (charset1 + menudata_length)
    clc
    lda #$0
    adc m_menudata_length
    sta v_saveram

    lda v_charset1
    adc m_menudata_length+1
    sta v_saveram+1

    rts

; first, get length of menu-data and then copy it to invisible vram (charset1 area)
; invisible vram location is v_charset1
.copy_menu_to_vram
    ; src main ram
    clc
    lda m_menufile
    adc #4
    sta arg1

    lda m_menufile+1
    adc #0
    sta arg1+1
    
    ; dest vram
+   lda #0
    sta arg2
    lda v_charset1                      ;*32*256
    sta arg2+1

    ; length
    lda #m_menufile
    ldx #0
    ldy #2
    jsr k_indfet
    sta arg3
    sta m_menudata_length
    
    lda #m_menufile
    ldx #0
    ldy #3
    jsr k_indfet
    sta arg3+1
    sta m_menudata_length+1

    ;jsr complex_instruction_shared_entry
    ldy arg2
    lda arg2 + 1
    jsr rtv_vtr_swp_shared_setup
    jsr ram_to_vram
    ;jmp complex_instruction_shared_exit

    rts

; checks whether the first two bytes are VM
.check_file_format
        lda #m_menufile             ;a holds the zp address to where the data is stored
        ldx #0
        ldy #0
        jsr k_indfet
        cmp #118
        bne .invalid_file
        lda #m_menufile
        ldx #0
        iny
        jsr k_indfet
        cmp #109
        bne .invalid_file
        rts

.invalid_file
        jsr k_primm
        !pet "Not a VM file"
        !byte 0
        rts

.clear_memory
    ;sta m_menufile
    ;stx m_menufile+1

    lda #$0
    sta $03e4
    sta $03e5
    sta $03e6
    sta $03e7
    sta $03e8
    sta $03e9
    sta $03ea
    sta $03eb
    sta $03ec
    sta $03ed
    sta $03ee
    sta $03ef

    lda #$ff
    sta m_topmenu_selected

    rts

; read charset address. 8192 in case of 16 kB
.read_charset_address 
        ldx #$1c
        jsr vdc_reg_X_to_A
        and #224
        sta v_charset1
        rts

.read_attribute_address
        ldx #$14
        jsr vdc_reg_X_to_A
        sta v_attributeram+1

        ldx #$15
        jsr vdc_reg_X_to_A
        sta v_attributeram

        rts

;---------- VDC Basic copy/paste routines below ---------

VDCLIB_OPTION_SELFMOD = 1
VDCLIB_OPTION_BANKING = 1

rtv_vtr_swp_shared_setup
		jsr AY_to_vdc_regs_18_19
		ldx #31	; VRAM register
		stx vdc_reg
		ldx #0
		; negate int16 for easier counting:
		txa
		sec
		sbc arg3
		sta arg3
		txa
		sbc arg3 + 1
		sta arg3 + 1
		rts	; > X=0 (callers depend on it)

VDC_RAM_READPTR		= arg1
VDC_RAM_WRITEPTR	= arg2
VDC_COUNTER		= arg3

vmf ; fill VRAM with value
;		jsr complex_instruction_shared_entry	; > AAYY = arg3

		; decrement byte counter because the first one will be written manually
		lda arg3	; take a look at low byte
		bne +
		dec arg3 + 1
+		dec arg3

		; clear BLOCK COPY register bit to get BLOCK WRITE:
		ldx #24
		jsr vdc_reg_X_to_A
		and #$7f
		jsr A_to_vdc_reg_X

		; write first byte
		lda arg2
		
		;set target
		ldy arg1
		ldx arg1 + 1
		jsr A_to_vram_XXYY
		
		;set count
		lda arg3
		ldy arg3 + 1
		jsr vdc_do_YYAA_cycles

        rts
		
		;jmp complex_instruction_shared_exit

+addcode_vdc_read
+addcode_ram_to_vram

+addcode_vdc_do_YYAA_cycles
+addcode_A_to_vram_XXYY

vmc ; copy VRAM to VRAM
		;jsr complex_instruction_block_entry ; > AAYY = arg3
		
		; set register bit for BLOCK COPY:
		ldx #24
		jsr vdc_reg_X_to_A
		ora #128
		jsr A_to_vdc_reg_X
		; set source
--		ldy arg1
		lda arg1 + 1
		ldx #32
		jsr AY_to_vdc_regs_Xp1
		; set target
-		ldy arg2
		lda arg2 + 1
		jsr AY_to_vdc_regs_18_19

		; set count
		lda arg3
		ldy arg3 + 1
		jsr vdc_do_YYAA_cycles
		
		dec arg4
		beq ++

		; increase target address
		clc
		lda arg2
		adc arg5
		sta arg2
		
		bcc +
		inc arg2+1

		; should source address be increased?
+		lda arg6
		cmp #0
		beq - ; no. jump to reading target address

		; increase source address
		clc
		adc arg1
		sta arg1

		bcc --
		inc arg1+1
		jmp --

++      rts
;++		jmp complex_instruction_shared_exit

vmw ; VRAM location = value
        ldy arg1
        ldx arg1+1

        lda arg2
		
        jmp A_to_vram_XXYY
